<!-- $Revision: 1.1 $ -->
<refentry id="package.http.http-request.response-eval">
 <refnamediv>
  <refname>Response Evaluation</refname>
  <refpurpose>
   Evaluating the information from a HTTP response
  </refpurpose>
 </refnamediv>

 <refsect1 id="package.http.http-request.response-eval.intro">
  <title>Introduction</title>

  <para>
   Because HTTP is a protocol based on the <emphasis>Request -
   Response</emphasis> scheme, every HTTP request is followed by a HTTP
   response. <classname>HTTP_Request</classname> offers several methods
   to evaluate the information from these responses.
  </para>
 </refsect1>

 <refsect1 id="package.http.http-request.response-eval.codes">
  <title>Response Codes</title>

  <para>
   A important part of the HTTP response is the response code. The most
   well-known response code probably is <literal>404</literal>, which
   you may have seen in your browser at several occasions. The meaning
   of <literal>404</literal> is that the requested ressource could not
   be found. A complete list of status codes can be found in <ulink
   url="&url.rfc;2616">RFC 2616</ulink>.
  </para>

  <example>
   <title>Checking the response code</title>

   <programlisting role="php">
require_once "HTTP/Request.php";

$urls = array(
    "http://www.example.com/",
    "http://example.com/thisdoesnotexist.html"
    );

$req =&amp; new HTTP_Request("");
foreach ($urls as $url) {
    $req->setURL($url);
    $req->sendRequest();

    $code = $req->getResponseCode();
    switch ($code) {
    case 404:
        echo "Document not found\n";
        break;

    case 200:
        echo "Everything's ok\n";
        break;

    /* ... */
    }
}
   </programlisting>
  </example>
 </refsect1>

 <refsect1 id="package.http.http-request.response-eval.header">
  <title>Response Headers</title>

  <para>
   Similar to a HTTP request a HTTP response consists of a header and a
   body. <classname>HTTP_Request</classname> offers a method to access
   the header of the response.
  </para>

  <example>
   <title>Getting all headers from the response</title>

   <programlisting role="php">
require_once "HTTP/Request.php";

$req =&amp; new HTTP_Request("http://example.com/");
$req->sendRequest();

foreach ($req->getResponseHeader() as $name => $value) {
    echo $name . " = " . $value . "\n";
}
   </programlisting>
   <para>
    This will print all headers and the appendant values.
   </para>
  </example>

  <example>
   <title>Getting a specific header</title>

   <programlisting role="php">
require_once "HTTP/Request.php";

$req =&amp; new HTTP_Request("http://example.com/");
$req->sendRequest();

echo $req->getResponseHeader("Date");
   </programlisting>
   <para>
    This will print the value of the <literal>Date:</literal> header.
   </para>
  </example>
 </refsect1>

 <refsect1 id="package.http.http-request.response-eval.cookies">
  <title>Response Cookies</title>

  <para>
   Fetching the cookies that are part of the HTTP response is described
   in the <link
   linkend="package.http.http-request.cookie">Cookies</link> section.
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->  
